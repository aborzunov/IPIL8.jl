var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = IPIL8","category":"page"},{"location":"#IPIL8","page":"Home","title":"IPIL8","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [IPIL8]","category":"page"},{"location":"#IPIL8.IPIL8","page":"Home","title":"IPIL8.IPIL8","text":"module IPIL8\n\nПакет реализует исследование численные методы решения обратных задач для нелинейных сингулярно возмущённых уравнений типа реакция-диффузия-адвекция с данными о положении фронта реакции.\n\nАвтор исходного кода пакета:     - Андрей Борзунов, Кафедра математики физического факультета МГУ им. Ломоносова.\n\n\n\n\n\n","category":"module"},{"location":"#IPIL8.apply_on_dynamic_mesh-Tuple{Array{T,2} where T,Array{T,2} where T,Int64,Int64}","page":"Home","title":"IPIL8.apply_on_dynamic_mesh","text":"apply_on_dynamic_mesh(ϕ::Matrix, XX::Matrix,\n                  N::Int, M::Int) -> Matrix\n\nАппроксимирует ϕ на динамичски изменяющуюся на каждом временном шаге сетку XX.\n\nФункция phidetermination определяют вырожденные корни на стартовой сетке.  Φ проиозводит линейные операции над векторами на каждом временном шаге, опять же на стартовой сетке. Поэтому если в расчетах была использована динамическая сетка, то нужно переопределить ϕ на этой динамической сетке.\n\n\n\n\n\n","category":"method"},{"location":"#IPIL8.f1-Tuple{Array{T,2} where T,Array{T,2} where T,Array,Int64,Int64}","page":"Home","title":"IPIL8.f1","text":"f1(ϕ::Matrix, u::Matrix, Xₙ::Array, N::Int, M::Int) -> Vector\n\nНаходит положение переходного слоя f_1(t) = x_tp(t) путем поиска точки пересечения аргумента, при котором пересекаются u(xt) и ϕ(x).\n\nТочка пересечения находится путем интерполяции функции обратной к u(xt) - ϕ(x) = 0, передавай аргументы в инвертированном виде в find_f_zeros.\n\nSee also: find_f_zeros\n\n\n\n\n\n","category":"method"},{"location":"#IPIL8.f2-Tuple{Array{T,1} where T,Array{T,2} where T,Array,Int64,Int64}","page":"Home","title":"IPIL8.f2","text":"f2(ϕ::Matrix, u::Matrix, Xₙ::Array, N::Int, M::Int) -> Vector\n\nНаходит значение искомой функции на переходном слое f_2(t) = u(x_tp t). Находится путем интерполяции функции u(x - f1(t) t) = 0.\n\nSee also: find_f_zeros\n\n\n\n\n\n","category":"method"},{"location":"#IPIL8.find_f_zeros-Tuple{Array{T,1} where T,Array{T,1} where T}","page":"Home","title":"IPIL8.find_f_zeros","text":"find_f_zeros(f::Vector, Xₙ::Vector)\n\nНаходит такой x, что f(x) = 0. f — сеточные значения функции на сетке Xₙ.\n\nwarning: Warning\nФункция обязана пересекать ноль. Не сработает на неотрицательных функциях.\nВозвращает только аргуент реализующий первый ноль.\nРешение ищется аппроксимацией.\n\n\n\n\n\n","category":"method"},{"location":"#IPIL8.generate_obs_data-Tuple{Array{T,2} where T,Array{T,1} where T,Int64,Array{T,1} where T,Int64,Array{T,1} where T,Array{T,1} where T,Array{T,1} where T}","page":"Home","title":"IPIL8.generate_obs_data","text":"generate_obs_data(u::Matrix, Xₙ::Vector, N::Int,\n                  Tₘ::Vector, M::Int,\n                  qₙ::Vector,\n                  ulₘ::Vector, urₘ::Vector)\n\nФнукция-сокращение.\n\n#Return Левый вырожденный корень, правый, их полуразность, положение переходного слоя, значение u на переходном слое. ϕl, ϕr, ϕ, f1_data, f2_data\n\nSee also: phidetermination, Φ, f1, f2.\n\n\n\n\n\n","category":"method"},{"location":"#IPIL8.phidetermination-Tuple{Array{T,1} where T,Array{T,1} where T,Array{T,1} where T,Int64,Array{T,1} where T,Int64}","page":"Home","title":"IPIL8.phidetermination","text":"phidetermination(q::Vector, ub::Vector,\n                 Xₙ::Vector, N::Int,\n                 Tₘ::Vector, M::Int;\n                 reverseX = false)\n\nРешает ОДУ для нахождения вырожденного корня.\n\nreverseX флаг обозначающий обратное направление интегрирования по оси X.\n\n\n\n\n\n","category":"method"},{"location":"#IPIL8.Φ-Tuple{Array{T,2} where T,Array{T,2} where T,Int64,Int64}","page":"Home","title":"IPIL8.Φ","text":"Φ(ϕ_l::Matrix, ϕ_r::Matrix, N::Int, M::Int) -> ::Vector\n\nВычисляет полуразность вырожденных решений phi_l^m - phi_r^m2 + phi_l^m на каждом шаге по времени m с помощью матриц вырожденных решений phi_l и phi_r вырожденного корня.\n\n\n\n\n\n","category":"method"}]
}
